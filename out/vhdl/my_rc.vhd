-- File: ../out/vhdl/my_rc.vhd
-- Generated by MyHDL 0.10
-- Date: Wed Dec  5 18:53:24 2018


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_010.all;

entity my_rc is
    port (
        clk: in std_logic;
        reset: in std_logic;
        axis_s_raw_tdata: in unsigned(31 downto 0);
        axis_s_raw_tready: out std_logic;
        axis_s_raw_tvalid: in std_logic;
        axis_s_raw_tlast: in std_logic;
        axis_m_sum_tdata: out unsigned(31 downto 0);
        axis_m_sum_tready: in std_logic;
        axis_m_sum_tvalid: out std_logic;
        axis_m_sum_tlast: out std_logic
    );
end entity my_rc;


architecture MyHDL of my_rc is


type t_enum_state_t_1 is (
    CALCULATE,
    FINISH,
    START
);
signal state: t_enum_state_t_1;
signal d: signed (31 downto 0);
signal Vout: signed (31 downto 0);
signal Vin: signed (31 downto 0);

begin




MY_RC_SUM_PROC: process (clk) is
begin
    if rising_edge(clk) then
        if (reset = '0') then
            Vout <= to_signed(0, 32);
            d <= to_signed(0, 32);
            axis_m_sum_tdata <= to_unsigned(0, 32);
            Vin <= to_signed(0, 32);
            state <= START;
            axis_m_sum_tlast <= '0';
            axis_m_sum_tvalid <= '0';
            axis_s_raw_tready <= '0';
        else
            case state is
                when START =>
                    Vout <= to_signed(0, 32);
                    d <= to_signed(0, 32);
                    state <= CALCULATE;
                when CALCULATE =>
                    axis_m_sum_tvalid <= '1';
                    axis_m_sum_tlast <= '0';
                    axis_s_raw_tready <= '1';
                    if (axis_s_raw_tvalid = '1') then
                        Vin <= signed(resize(axis_s_raw_tdata * 256, 32));
                        d <= ((Vin - Vout) / 8);
                        Vout <= (Vout + d);
                        axis_m_sum_tdata <= unsigned(shift_right(Vout, 8));
                        if (axis_s_raw_tlast = '1') then
                            state <= FINISH;
                        end if;
                    end if;
                when FINISH =>
                    axis_s_raw_tready <= '0';
                    axis_m_sum_tvalid <= '1';
                    axis_m_sum_tlast <= '1';
                    axis_m_sum_tdata <= unsigned(d / 256);
                    if (axis_m_sum_tready = '1') then
                        state <= START;
                    end if;
                when others =>
                    assert False report "End of Simulation" severity Failure;
            end case;
        end if;
    end if;
end process MY_RC_SUM_PROC;

end architecture MyHDL;
